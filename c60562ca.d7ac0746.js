(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{100:function(e,n,t){"use strict";var a=t(0),r=t(99);n.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},102:function(e,n,t){"use strict";var a=t(0),r=t.n(a),l=t(100),s=t(95),o=t(47),c=t.n(o),i=37,p=39;n.a=function(e){var n=e.block,t=e.children,o=e.defaultValue,b=e.values,u=e.groupId,d=Object(l.a)(),m=d.tabGroupChoices,j=d.setTabGroupChoices,O=Object(a.useState)(o),g=O[0],f=O[1];if(null!=u){var v=m[u];null!=v&&v!==g&&b.some((function(e){return e.value===v}))&&f(v)}var y=function(e){f(e),null!=u&&j(u,e)},h=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":n})},b.map((function(e){var n=e.value,t=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===n,className:Object(s.a)("tabs__item",c.a.tabItem,{"tabs__item--active":g===n}),key:n,ref:function(e){return h.push(e)},onKeyDown:function(e){return function(e,n,t){switch(t.keyCode){case p:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case i:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(h,e.target,e)},onFocus:function(){return y(n)},onClick:function(){return y(n)}},t)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(t).filter((function(e){return e.props.value===g}))[0]))}},103:function(e,n,t){"use strict";var a=t(0),r=t.n(a);n.a=function(e){return r.a.createElement("div",null,e.children)}},83:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return u}));var a=t(2),r=t(6),l=(t(0),t(94)),s=t(102),o=t(103),c={title:"Script Options"},i={unversionedId:"denon/configuration/script",id:"denon/configuration/script",isDocsHomePage:!1,title:"Script Options",description:"For the sake of brevity Typescript example omit the import for the DenonConfig:",source:"@site/docs/denon/configuration/script.md",permalink:"/docs/denon/configuration/script",editUrl:"https://github.com/denosaurs/website/edit/master/docs/denon/configuration/script.md",lastUpdatedBy:"Qu4k",lastUpdatedAt:1596724565,sidebar:"denon",previous:{title:"Templates",permalink:"/docs/denon/configuration/templates"},next:{title:"Watcher Options",permalink:"/docs/denon/configuration/watcher"}},p=[{value:"Scripts",id:"scripts",children:[]},{value:"Script Options",id:"script-options",children:[{value:"Environment variables",id:"environment-variables",children:[]},{value:"Permissions",id:"permissions",children:[]},{value:"File watching",id:"file-watching",children:[]},{value:"Import Map",id:"import-map",children:[]},{value:"TS config",id:"ts-config",children:[]},{value:"Unstable",id:"unstable",children:[]},{value:"Inspect and InspectBrk",id:"inspect-and-inspectbrk",children:[]},{value:"Cert",id:"cert",children:[]},{value:"Log",id:"log",children:[]}]}],b={rightToc:p};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"For the sake of brevity Typescript example omit the import for the ",Object(l.b)("inlineCode",{parentName:"p"},"DenonConfig"),":"),Object(l.b)("p",{parentName:"div"},Object(l.b)("inlineCode",{parentName:"p"},'import { DenonConfig } from "https://deno.land/x/denon/mod.ts";')))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Denon")," takes inspiration from the awesome ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/umbopepato/velociraptor"}),"velociraptor")," module in the way it handles scripts."),Object(l.b)("h2",{id:"scripts"},"Scripts"),Object(l.b)("p",null,"Scripts are declared inside the ",Object(l.b)("inlineCode",{parentName:"p"},"scripts")," object and are identified by a name:"),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    // they all resolve to `deno run app.ts` when you run `denon start`\n    "start": "app.ts",\n    // OR\n    "start": "run app.ts",\n    // OR\n    "start": "deno run app.ts"\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'\nscripts:\n  # they all resolve to `deno run app.ts` when you run `denon start`\n  start: "app.ts"\n  # OR\n  start: "run app.ts"\n  # OR\n  start: "deno run app.ts"\n\n\n'))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    // they all resolve to `deno run app.ts` when you run `denon start`\n    start: "app.ts",\n    // OR\n    start: "run app.ts",\n    // OR\n    start: "deno run app.ts",\n  },\n};\n')))),Object(l.b)("p",null,"Scripts can also be defined by a complex object:"),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      // with an optional description that\n      // is shown when you run `denon` to list\n      // all the available\n      "desc": "Run the main server.",\n\n      // available options...\n      // they are described in the next paragraph\n      "allow": ["env", "write"],\n      "unstable": true\n\n      // running `denon start` will resolve in\n      // deno run --allow-env --allow-write --unstable app.ts\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  start:\n    cmd: "deno run app.ts"\n    # with an optional description that\n    # is shown when you run `denon` to list\n    # all the available\n    desc: "Run the main server."\n\n    # avaiable options\n    # they are described in the next paragraph\n    allow:\n      - env\n      - write\n    unstable: true\n# running `denon start` will resolve in\n# deno run --allow-env --allow-write --unstable app.ts\n'))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      // with an optional description that\n      // is shown when you run `denon` to list\n      // all the available\n      desc: "Run the main server.",\n\n      // available options...\n      // they are described in the next paragraph\n      allow: ["env", "write"],\n      unstable: true,\n\n      // running `denon start` will resolve in\n      // deno run --allow-env --allow-write --unstable app.ts\n    },\n  },\n};\n')))),Object(l.b)("h2",{id:"script-options"},"Script Options"),Object(l.b)("p",null,"Options can be script specific or be declared as global in the root of the config file."),Object(l.b)("h3",{id:"environment-variables"},"Environment variables"),Object(l.b)("p",null,"Environment variables can be provided as an object and are passed directly to the child process."),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  // globally applied to all scripts\n  "env": { "TOKEN": "SUPER SECRET TOKEN" },\n\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      // made available only in the\n      // `start` script\n      "env": { "PORT": 3000 }\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'# globally applied to all scripts:\nenv:\n  TOKEN: "super secret token"\n\nscripts:\n  start:\n    cmd: "deno run app.ts"\n    desc: "Run the main server."\n\n    # made available only in the\n    # `start` script\n    env:\n      PORT: 3000\n'))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  // globally applied to all scripts\n  env: { TOKEN: "SUPER SECRET TOKEN" },\n\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      // made available only in the\n      // `start` script\n      env: { PORT: 3000 },\n    },\n  },\n};\n')))),Object(l.b)("h3",{id:"permissions"},"Permissions"),Object(l.b)("p",null,"Permission can be granted to child processes. You can provide specific permissions for each script,\nbut you can also declare permissions globally, following the same format."),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  // globally applied to all scripts\n  // as object ...\n  "allow": {\n    "read": "/etc,/tmp", // --allow-read=/etc,/tmp\n    "env": true // --allow-env\n  },\n  // ... or as array\n  "allow": [\n    "run", // --allow-run\n    "net" // --allow-net\n  ],\n\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n\n      // specific for a single script\n      // as object ...\n      "allow": {\n        "read": "/etc,/tmp", // --allow-read=/etc,/tmp\n        "env": true // --allow-env\n      },\n      // ... or as array\n      "allow": [\n        "run", // --allow-run\n        "net" // --allow-net\n      ]\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'\n# globally applied to all scripts\n# as object ...\nallow:\n  read: "/etc,/tmp" # --allow-read=/etc,/tmp\n  env: true # --allow-env\n# ... or as array\nallow:\n  - "run" # --allow-run\n  - "net" # --allow -net\n\nscripts:\n  start:\n    cmd: deno run app.ts\n\n    # specific for a single script\n    # as object ...\n    allow:\n      read: "/etc,/tmp" # --allow-read=/etc,/tmp\n      env: true # --allow-env\n    # ... or as array\n    allow:\n      - "run" # --allow-run\n      - "net" # --allow -net\n\n\n\n\n\n\n\n'))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  // globally applied to all scripts\n  // as object ...\n  allow: {\n    read: "/etc,/tmp", // --allow-read=/etc,/tmp\n    env: true, // --allow-env\n  },\n  // ... or as array\n  allow: [\n    "run", // --allow-run\n    "net", // --allow-net\n  ],\n\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n\n      // specific for a single script\n      // as object ...\n      allow: {\n        read: "/etc,/tmp", // --allow-read=/etc,/tmp\n        env: true, // --allow-env\n      },\n      // ... or as array\n      allow: [\n        "run", // --allow-run\n        "net", // --allow-net\n      ],\n    },\n  },\n};\n')))),Object(l.b)("h3",{id:"file-watching"},"File watching"),Object(l.b)("p",null,"While file watching is a core feature of ",Object(l.b)("inlineCode",{parentName:"p"},"denon")," you always have the option\nof disabling file watching and run a script only once:"),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  // globally applied to all scripts\n  // now denon will essentialy be a script runner\n  "watch": false,\n\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      // you can still enable watch on a script-by-script basis\n      "watch": true\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),"# globally applied to all scripts\n# not denon will essentially be a script runner\nwatch: false\n\nscripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  # you can still enable watch on a script-by-script basis\n  watch: false\n"))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  // globally applied to all scripts\n  // now denon will essentialy be a script runner\n  watch: false,\n\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      // you can still enable watch on a script-by-script basis\n      watch: true,\n    },\n  },\n};\n')))),Object(l.b)("h3",{id:"import-map"},"Import Map"),Object(l.b)("p",null,"Load import map file. Take a look a at the ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://deno.land/manual/linking_to_external_code/import_maps"}),"official docs")," for additional info."),Object(l.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"This feature in unstable in the current version of the deno executable."))),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "importmap": "importmap.json"\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  importmap: "importmap.json"\n'))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      importmap: "importmap.json",\n    },\n  },\n};\n')))),Object(l.b)("h3",{id:"ts-config"},"TS config"),Object(l.b)("p",null,"Load tsconfig.json configuration file:"),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "tsconfig": "tsconfig.json"\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  tsconfig: "tsconfig.json"\n'))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      tsconfig: "tsconfig.json",\n    },\n  },\n};\n')))),Object(l.b)("h3",{id:"unstable"},"Unstable"),Object(l.b)("p",null,"Enable if the script is using unstable features of deno runtime:"),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "unstable": true\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),"scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  unstable: true\n"))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      unstable: true,\n    },\n  },\n};\n')))),Object(l.b)("h3",{id:"inspect-and-inspectbrk"},"Inspect and InspectBrk"),Object(l.b)("p",null,"Activate inspector on ",Object(l.b)("inlineCode",{parentName:"p"},"host:port"),". If ",Object(l.b)("inlineCode",{parentName:"p"},"inspectBrk")," is used the executions breaks at the start of the user script:"),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "inspect": "127.0.0.1:9229",\n      // OR\n      "inspectBrk": "127.0.0.1:9229"\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'\nscripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  inspect: "127.0.0.1:9229",\n  # OR\n  inspectBrk: "127.0.0.1:9229"\n\n\n\n\n'))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      inspect: "127.0.0.1:9229",\n      // OR\n      inspectBrk: "127.0.0.1:9229",\n    },\n  },\n};\n')))),Object(l.b)("h4",{id:"lockfile"},"Lockfile"),Object(l.b)("p",null,"Check the specified lock file:"),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "lock": "lock.json"\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  lock: "lock.json"\n'))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      lock: "lock.json",\n    },\n  },\n};\n')))),Object(l.b)("h3",{id:"cert"},"Cert"),Object(l.b)("p",null,"Load certificate authority from PEM encoded file:"),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "cert": "cert.pem"\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  cert: "cert.pem"\n'))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      cert: "cert.pem",\n    },\n  },\n};\n')))),Object(l.b)("h3",{id:"log"},"Log"),Object(l.b)("p",null,"Set log level: (possible values: ",Object(l.b)("inlineCode",{parentName:"p"},"debug"),", ",Object(l.b)("inlineCode",{parentName:"p"},"info"),")"),Object(l.b)(s.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "log": "debug" // or "info"\n    }\n  }\n}\n'))),Object(l.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  log: "debug" # or "info"\n\n'))),Object(l.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      log: "debug", // or "info"\n    },\n  },\n};\n')))))}u.isMDXComponent=!0},94:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=r.a.createContext({}),p=function(e){var n=r.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},b=function(e){var n=p(e.components);return r.a.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),b=p(t),d=a,m=b["".concat(s,".").concat(d)]||b[d]||u[d]||l;return t?r.a.createElement(m,o(o({ref:n},i),{},{components:t})):r.a.createElement(m,o({ref:n},i))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,s=new Array(l);s[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var i=2;i<l;i++)s[i]=t[i];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},95:function(e,n,t){"use strict";function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}n.a=function(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}},99:function(e,n,t){"use strict";var a=t(0),r=Object(a.createContext)(void 0);n.a=r}}]);